scope  (kapsam)
------------------

file scope  (dosya kapsamı - dosya bilinirlik alanı)
block scope (blok kapsamı - blok bilinirlik alanı)
------------------------
function prototype scope (fonksiyon prototip bilinirlik alanı)
function scope (fonksiyon kapsamı)



int x = 10;
void func(int);
typedef int Word;

void f1()
{
	++x;
	func(1);
}

void f2()
{
	Word a = x;

	//
}

void f3()
{
	x += 10;
	func(2);
}
//----------------------------------------------------------------------------------------------------------

storage duration
	static storage class (statik ömür)
	automatic storage class (otomatik ömür)
	dynamic storage class (otomatik ömür)


int main()
{
	int x;

}

#include <stdio.h>



int main()
{
	printf("necati");
	int x = 10;  //C89'da gecersiz C99 ve sonrasi C++

}
//----------------------------------------------------------------------------------------------------------
indetermined value
garbage value

statik ömürlü değişkenlere ilk değer veren ifadeler
(initializing expression) sabit ifadesi olmak zorunda.
C++ dilinde böyle bir mecburiyet  yok.

,

comma separated list


func(1, 4, 5, 7);

#include <stdio.h>


int main()
{
	int x = 10, y = 20, z = 30;
	//int x = 10;
	//int y = 20;
	//int z = 30;

}
//----------------------------------------------------------------------------------------------------------
#include <stdio.h>


int main()
{
	int a, b, c;
}
//----------------------------------------------------------------------------------------------------------
#include <stdio.h>


int main()
{
	int a, b = 10, c;
}
//----------------------------------------------------------------------------------------------------------
#include <stdio.h>


int main()
{
	int a, double b; //gecersiz
}
//----------------------------------------------------------------------------------------------------------
#include <stdio.h>

int func(void);

int main()
{
	int x = 10;
	int y = x * x;
	int z = x + y;
	//code
	int t = func();
}
//----------------------------------------------------------------------------------------------------------

aynı isimlerin farklı varlıklara verilmesi ve isim çakışması
name collision
name clash
isim çakışması

Birden fazla varliga aynı isim verilebilir mi?

aynı scope'ta (aynı kapsamda) bir isim birden fazla varlığa verilemez.

peki Necati, aynı scope ne demek?



int x = 10;
double x = 20;

eğer iki ismin kapsamı aynı } (kapanan küme parantezinde)
bitiyor ise bu isimlerin kapsamı aynıdır.

eğer iki ismin kapsamı farklı } (kapanan küme parantezinde)
bitiyor ise bu isimlerin kapsamı farklıdır.

scope resolution op.

::x

#include <stdio.h>

//warning C4456: declaration of 'x' hides previous local declaration

int main()
{
	int x = 10;

	if (x > 5) {
		int x = 23;

		printf("x = %d\n", x);

	}

}

#include <stdio.h>

int x = 10;

#include <stdio.h>

int x = 10;


int main()
{
	printf("[1] x = %d\n", x); //10
	int x = 444;
	if (1) {
		printf("[2] x = %d\n", x); //444

		int x = 141;
		printf("[3] x = %d\n", x); //141

		if (1) {
			int x = 345;
			printf("[4] x = %d\n", x); //345

		}
		printf("[5] x = %d\n", x); //141
	}
	printf("[6] x = %d\n", x); //444
}
//----------------------------------------------------------------------------------------------------------

int main()
{
	printf("[1] x = %d\n", x); //10
	int x = 444;
	if (1) {
		printf("[2] x = %d\n", x); //444

		int x = 141;
		printf("[3] x = %d\n", x); //141

		if (1) {
			int x = 345;
			printf("[4] x = %d\n", x); //345

		}
		printf("[5] x = %d\n", x); //141
	}
	printf("[6] x = %d\n", x); //444
}
//----------------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	//int x = 5, y = 10, z = 45;
	int x = 5;
	int y = 10;
	int z = 45;
}

//----------------------------------------------------------------------------------------------------------