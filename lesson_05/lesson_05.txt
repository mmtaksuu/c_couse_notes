Fonksiyonlar
---------------

to define a function
function definition
fonksiyonu tanımlamak

to call a function
function call
fonksiyonu çağırmak

to declare a function
function declaration
fonksiyonu bildirmek



get_circle_area(double area)
{
	//code

}



implicit int


örtülü int
gizli int
kapalı int

x;





//warning C4431: missing type specifier - int assumed.
//Note: C no longer supports default-int

func()
{

	return 1;
}
//----------------------------------------------------------------------------------------------------------


formal parameter



//void func(a, b, c)
//double a, b, c;
//{
//
//}

void func(double a, double b, double c)
{

}
//----------------------------------------------------------------------------------------------------------

old style function definition




//func(a, b, c)
//{
//
//}

int func(int a, int b, int c)
{
	///...
}
//----------------------------------------------------------------------------------------------------------


old style function definition


return statement
----------------

return deyimi

----------------------
expression statement (ifade deyimi)
compound statement  (bileşik deyim)
null statement  (boş deyim)
control statement (kontrol deyimi)

x + 5;

++x;
a = b * b + c * c;

3;
x;
x + 5;

if (x > 5) {
	++a;
	--b;
	c = a * b;
}

 {
	temp = x;
	x = y;
	y = temp;
 }

 ;




int main()
{
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
}
//----------------------------------------------------------------------------------------------------------

while (expr)
	;

{}

;  {}


----------------------------------------------

if statement

while statement
do while statement
for statement

switch statement
goto statement

continue statement
break statement
return statement

return 1;
return x * x + y * y > 0;

return expr;

void func(int x)
{
	statement1;
	statement2;
	if (x > 5)
		return;
	statement3;
	statement4;
}


int func()
{
	////.
	////.
	return x + 4;
	////.

}


//oneliner
int sum(int x, int y)
{
	return x + y;
}
//----------------------------------------------------------------------------------------------------------


int max2(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}
//----------------------------------------------------------------------------------------------------------

int max2(int x, int y)
{
	if (x > y)
		return x;

	return y;
}
//----------------------------------------------------------------------------------------------------------
int max2(int x, int y)
{
	return x > y ? x : y;
}



int absolute(int x)
{
	if (x > 0)
		return x;

	return -x;
}
//----------------------------------------------------------------------------------------------------------


int absolute(int x)
{
	return x > 0 ? x : -x;
}
//----------------------------------------------------------------------------------------------------------

int max3(int a, int b, int c)
{
	int max = a;

	if (b > max)
		max = b;

	if (c > max)
		max = c;

	return max;
}



int ndigit(int x)
{
	int count = 0;

	if (x == 0)
		return 1;

	while (x != 0) {
		++count;
		x /= 10;
	}

	return count;
}


//987345
int sum_digit(int x)
{
	int sum = 0;

	while (x != 0) {
		sum += x % 10;
		x /= 10;
	}

	return sum;
}

C ve C++ dillerinde İngilizcede "nested function" ya da "local function" denilen
fonksiyon modeli yok. Bir fonksiyonun içinde başka bir fonksiyon tanımlanamaz.
Tüm fonksiyonlar birbirlerinin dışında global isim alanında tanımlanmak zorunda.


C dilinde (varsayılan şekilde) tüm fonksiyon çağrıları (call by value) (değerle çağrı)
modelindedir:


//----------------------------------------------------------------------------------------------------------

#include <stdio.h>


void func(int x)
{
	x = 9999;
}

int main()
{
	int y = 33;

	func(y);

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------------

C'de call be reference (referansla çağrı) ancak pointer (adres) semantiği ile yapılabilir:


//----------------------------------------------------------------------------------------------------------

#include <stdio.h>


void func(int* p)
{
	*p = 9999;
}

int main()
{
	int y = 33;

	func(&y);

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------------
#include <stdio.h>


void func(int x)
{
	x = 9999;
}

int main()
{
	int y = 33;

	func(y);

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------------
to discard the return value
fonksiyonun geri dönüş değeri olmasına karşın çağıran kodun
bu geri dönüş değerini kullanmaması

1. fonksiyonun varlık nedeni hesaplanan bir değer
Dikkat!!! böyle bir fonksiyon çağırdığınızda mutlaka geri dönüş değerini kullanmalısınız

2. test fonksiyonları
geri dönüş değeri bir soruya verilen boolean yanıt
doğru / yanlış
evet / hayır
geçerli / geçersiz

_Bool

int isprime(int val);
_Bool isprime(int val);

//bool isprime(int val);

if (isprime(x) == isprime(y))
----------------------------

geri dönüş değeri başarı bilgisi olan fonksiyonlar


int func(int x)
{
	if (x < 100)
		return x + 5;

	////
	if (x > 120)
		return x - 5;

	//?????
}
//----------------------------------------------------------------------------------------------------------