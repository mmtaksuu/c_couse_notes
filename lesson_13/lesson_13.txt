For Loop
- 'For' is reserved word or keyword,
- A parenthesis is mandatory after the 'for' keyword,
- Two semicolon ';' is mandotory in for parenthesis.
----------------------------------------------------

The relationship between for loop and while loop is given below.

----------------------
for (exp1; exp2; exp3)
	statement;

----------------------
exp1;
while ( exp2 ) {
	statement;
	exp3;
}


/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	for (i = 0; i < 100; ++i) {
		printf("%d ", i);
	}

	printf("\ndongu sonrasindaki deyim\n");

}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	i = 0;
	for (; i < 100; ++i) {
		printf("%d ", i);
	}

	printf("\ndongu sonrasindaki deyim\n");
}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	i = 0;

	for (; i < 100;) {
		printf("%d ", i);
		++i;
	}
	printf("\ndongu sonrasindaki deyim\n");

}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	i = 0;

	while (i < 100) {
		printf("%d ", i);
		++i;
	}

	printf("\ndongu sonrasindaki deyim\n");

}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	i = 0;

	for (; ;) {
		if (i == 100)
			break;
		printf("%d ", i);
		++i;
	}

	printf("\ndongu sonrasindaki deyim\n");

}

/**********************************************************************************************************************/

Ways of defining an infinite loop in C
--------------------------------------

while (1) == for(;;) == for(;1;)


/**********************************************************************************************************************/
#include <stdio.h>

int f1(void);
int f2(void);
int f3(void);
int f4(void);

int main()
{
	for (f1(); f2(); f3())
		f4();

}

/**********************************************************************************************************************/
#include <stdio.h>


int main()
{
	int i;

	for (i = 0; i < 100; ++i) // Birer birer artan dongu degiskeni
		printf("%d ", i);

}

/**********************************************************************************************************************/
#include <stdio.h>


int main()
{
	int i;

	for (i = 0; i < 100; i += 2) // Ikiserli artan dongu degiskeni
		printf("%d ", i);

}

/**********************************************************************************************************************/
#include <stdio.h>


int main()
{
	int i;

	for (i = 1; i < 100000000; i *= 2)  // iki kati olarak artan dongu degiskeni
		printf("%d ", i);

}
// Output : 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152
            4194304 8388608 16777216 33554432 67108864

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i;

	for (i = 1; i < 100000000; i *= 10) // On kati olarak artan dongu degiskeni
		printf("%d\n", i);

}
// Output : 1 10 100 1000 10000 100000 1000000 10000000

/**********************************************************************************************************************/
#include <stdio.h>


int main()
{
	int i; // Isaretli olarak tanimlandiginda azalan dongu degiskeni

	for (i = 10; i >= 0; --i)
		printf("%d ", i);

}
// Output : 10 9 8 7 6 5 4 3 2 1 0

/**********************************************************************************************************************/
#include <stdio.h>


int main()
{
	unsigned int i; // Isaretsiz olarak tanimlandiginda azalan dongu degiskeni

	for (i = 10; i >= 0; --i)
		printf("%d ", i);

}
// Output : Sonsuz dongu! i degiskeni hicbir zaman negatif bir deger almayacagi icin program sonsuz donguye girer.

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{

	for (int i = 0; i < 10; ++i) {
		int i = 879; //C++ dilinde gecersiz, error: redeclaration of 'int i'
	}

}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{

	for (int i = 0; i < 10; ++i) {
		int i = 455;  //C ve C++ kural farkliligi, C 'de hata degildir.
		printf("%d ", i);
	}

}
// Output : 455 455 455 455 455 455 455 455 455 455

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int x = 10, y = 20;

	for (int i = x > y ? x : y; i < 100; ++i) {
		//...
	}

}

/**********************************************************************************************************************/
#include <stdio.h>

int main()
{
	int i, k;

	for (i = 0, k = 2; i * k < 12000; i++, k += i)
	{
        // codes
	}

}

/**********************************************************************************************************************/
#include <stdio.h>

int factorial(int x)
{
	int result = 1;

	for (int i = 1; i <= x; ++i)
		result *= i;

	return result;
}


int main()
{
	for (int i = 0; i < 13; ++i)
		printf("%2d! = %d\n", i, factorial(i));
}

/**********************************************************************************************************************/


 0! = 1
 1! = 1
 2! = 2
 3! = 6
 4! = 24
 5! = 120
 6! = 720
 7! = 5040
 8! = 40320
 9! = 362880
10! = 3628800
11! = 39916800
12! = 479001600
13! = 6227020800
14! = 87178291200
15! = 1307674368000
16! = 20922789888000
17! = 355687428096000
18! = 6402373705728000
19! = 121645100408832000
20! = 2.432.902.008.176.640.000



/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int power(int a, int b)
{
	return b == 0 ? 1 : a * power(a, b - 1);
}


// Recursive Factorial Func.
int factorial(int x)
{
	return x < 2 ? 1 : x * factorial(x - 1);
}


// Iterative Factorial Func.
//long long int factorial(int x)
//{
//	long long int result = 1;
//
//	for (int i = 1; i <= x; ++i)
//		result *= i;
//
//	return result;
//}


int main()
{
	for (int i = 0; i < 21; ++i)
		printf("%2d! = %lld\n", i, factorial(i));
}

/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int power(int a, int b)
{
	return b == 0 ? 1 : a * power(a, b - 1);
}


int main()
{
	int x, y;

	printf("iki tamsayi giriniz: ");
	scanf("%d%d", &x, &y);

	printf("%d uzeri %d = %d\n", x, y, power(x, y));


}

/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void iprint(int x)
{
	char str[40];
	int sign = 1;

	if (x < 0) {
		sign = -1;
		x = -x;
	}
	int i = 0;

	while (x != 0) {
		str[i++] = x % 10 + '0';
		x /= 10;
	}
	if (sign == -1)
		str[i++] = '-';

	str[i] = '\0';
	for (--i; i >= 0; --i) {
		putchar(str[i]);
	}

}

int main()
{
	iprint(-98765);

}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>

//98712

void iprint(int x)
{
	if (x < 0) {
		putchar('-');
		x = -x;
	}

	if (x == 0)
		return;
	iprint(x / 10);

	putchar(x % 10 + '0');
}

int main()
{
	iprint(-98765);

}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>


int fibo_r(int n)
{
	return n < 2 ? n :  fibo_r(n - 1) + fibo_r(n - 2);
}

int fibo_i(int n)
{

	if (n < 2)
		return n;

	int a = 0, b = 1, c;

	for (int i = 1; i < n; ++i) {
		c = a + b;
		a = b;
		b = c;
	}

	return c;

}


int fibo_l(int n) {
	const static int a[] = {
	0,
1,
1,
2,
3,
5,
8,
13,
21,
34,
55,
89,
144,
233,
377,
610,
987,
1597,
2584,
4181,
6765,
10946,
17711,
28657,
46368,
75025,
121393,
196418,
317811,
514229,
832040,
1346269,
2178309,
3524578,
5702887,
9227465,
14930352,
24157817,
39088169,
63245986,
102334155,
165580141,
267914296,
433494437,
701408733,
1134903170,
1836311903,
	};

	return a[n];
}




int main()
{
	clock_t start = clock();
	int a[50];

	for (int i = 0; i < 47; ++i) {
		a[i] = fibo_r(i);
	}
	clock_t end = clock();
	printf("%.12f saniye\n", (double)(end - start) / CLOCKS_PER_SEC);
	_getch();
	for (int i = 0; i < 47; ++i) {
		printf("%d    %d\n", i, a[i]);
	}

}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>

int factorial(int n)
{
	int result = 1;

	for (int i = 1; i <= n; ++i) {
		result *= i;
	}

	return result;
}

int main()
{
	int n;

	printf("serinin kac terimi toplanacak: ");
	scanf("%d", &n);

	double sum = 0.;

	for (int i = 0; i < n; ++i) {
		sum += 1. / factorial(i);
	}

	printf("sum = %f\n", sum);



}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>

int factorial(int n)
{
	int result = 1;

	for (int i = 1; i <= n; ++i) {
		result *= i;
	}

	return result;
}

int main()
{
	int n;

	printf("serinin kac terimi toplanacak: ");
	scanf("%d", &n);

	double sum = 0.;

	for (int i = 0; i < n; ++i) {
		if (i % 2 == 0)
			sum += 1. / (2 * i + 1);
		else
			sum -= 1. / (2 * i + 1);

	}

	printf("%f\n", 4. * sum);
}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>

int main()
{
	int n = 5;

	for (int i = 0; i + n; --i) {
		printf("NECATI\n");
	}
}

/**********************************************************************************************************************/

NESTED LOOP (iç içe döngüler)
------------------------------

/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>


int main()
{
	for (int i = 0; i < 10; ++i) {
		for (int k = 0; k < 20; ++k) {
			printf("(%d %d) ", i, k);
		}
	}

}

/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>


int main()
{
	int cnt = 0;

	for (int i = 0; i < 10; ++i) {
		for (int k = 0; k < 20; ++k) {
			++cnt;
		}
	}

	printf("cnt = %d\n", cnt);

}


/**********************************************************************************************************************/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>

//153  370  371  407

int main()
{
	int val = 100;

	for (int i = 1; i <= 9; ++i) {
		for (int j = 0; j <= 9; ++j) {
			for (int k = 0; k <= 9; ++k) {
				if (val == i * i * i + j * j * j + k * k * k)
					printf("%d\n", val);
				++val;
			}
		}
	}

}

/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>


int main()
{
	int val = 100;

	for (int i = 1; i <= 9; ++i) 
		for (int j = 0; j <= 9; ++j) 
			for (int k = 0; k <= 9; ++k) {
				if (val == i * i * i + j * j * j + k * k * k)
					printf("%d\n", val);
				++val;
			}



}

/**********************************************************************************************************************/

*
**
***
****
*****



 18  10  18   5   7   5   8   7  16  14  11  11   1  16  18  11  18   2  11  13

 10   8  14   1   2  13

/**********************************************************************************************************************/
 #define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>

#define   SIZE      20

int main()
{
	int a[SIZE];

	srand((unsigned)time(0));

	for (int i = 0; i < SIZE; ++i) {
		a[i] = rand() % 20;
		printf("%3d ", a[i]);
	}
	printf("\n");
	int k;

	for (int i = 0; i < SIZE; ++i) {
		for (k = 0; k < SIZE; ++k) {
			if (a[i] == a[k] && i != k)
				break;
		}
		if (k == SIZE)
			printf("%3d ", a[i]);
	}
	printf("\n");

}


/**********************************************************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>

//2 2 3 5 5

int main()
{
	int x;

	printf("bir tamsayi giriniz: ");
	scanf("%d", &x);

	int n = 2;

	while (x != 1) {
		while (x % n == 0) {
			printf("%d ", n);
			x /= n;
		}
		++n;
	}

}
/**********************************************************************************************************************/

fonksiyon bildirimleri 
function prototypes
------------------------

external reference

func(x, y);

fonk.a giris kodlari
e.reference
fonk.dna cikis kodlari

derleyicinin fonk'a giriş ve fonk'dan çıkış kodlarını 
doğru olarak üretebilmesi için çağrılan fonksiyon ile 
ilgili şu bilgilere sahip olması gerekir:

a) fonksiyonun geri dönüş değeri türü
b) fonksiyonun parametre değişkeni sayısı
c) fonksiyonun herbir parametredeğişkeninin türü